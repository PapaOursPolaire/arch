set -e

# üåå Script d'automatisation d'Arch Linux avec Hyprland

# PHASE 1: CONFIGURATION PR√â-INSTALLATION

# D√©tection des partitions
echo "üîç D√©tection des disques et partitions..."
DISKS=()
while IFS= read -r line; do
    DISKS+=("$line")
done < <(lsblk -d -n -o NAME,SIZE,TYPE | grep 'disk' | awk '{print $1 " (" $2 ")"}')

if [ ${#DISKS[@]} -eq 0 ]; then
    echo "‚ùå Aucun disque d√©tect√© !"
    exit 1
fi

# S√©lection du disque et partitionnement
echo "üìÄ Disques disponibles :"
for i in "${!DISKS[@]}"; do
    echo "  $((i+1)). ${DISKS[$i]}"
done

read -p "‚Üí S√©lectionnez un disque [1-${#DISKS[@]}]: " DISK_CHOICE
SELECTED_DISK="/dev/$(echo "${DISKS[$((DISK_CHOICE-1))]}" | awk '{print $1}')"

echo "üíæ Configuration des partitions pour $SELECTED_DISK:"
echo "   (Minimum recommand√©: EFI=550M, SWAP=optionnel, ROOT=30G)"
echo "   1. Partition EFI (boot)"
echo "   2. Partition SWAP (optionnel)"
echo "   3. Partition ROOT (syst√®me)"

# Configuration des partitions
read -p "‚Üí Taille de la partition EFI (ex: 550M): " EFI_SIZE
read -p "‚Üí Cr√©er un SWAP? [o/n]: " CREATE_SWAP
if [[ $CREATE_SWAP =~ ^[OoYy]$ ]]; then
    read -p "‚Üí Taille de la partition SWAP (ex: 4G): " SWAP_SIZE
    SWAP_ENABLED=true
else
    SWAP_ENABLED=false
fi
read -p "‚Üí Taille de la partition ROOT (ex: 30G): " ROOT_SIZE

# Cr√©ation des partitions
echo "üóÇÔ∏è Cr√©ation des partitions..."
parted -s "$SELECTED_DISK" mklabel gpt
parted -s "$SELECTED_DISK" mkpart primary fat32 0% "$EFI_SIZE"
START_NEXT=$(echo "$EFI_SIZE" | sed 's/[^0-9]*//g')
if [ "$SWAP_ENABLED" = true ]; then
    parted -s "$SELECTED_DISK" mkpart primary linux-swap "$EFI_SIZE" "$SWAP_SIZE"
    parted -s "$SELECTED_DISK" mkpart primary ext4 "$SWAP_SIZE" "$ROOT_SIZE"
    ROOT_PART="${SELECTED_DISK}3"
else
    parted -s "$SELECTED_DISK" mkpart primary ext4 "$EFI_SIZE" "$ROOT_SIZE"
    ROOT_PART="${SELECTED_DISK}2"
fi
parted -s "$SELECTED_DISK" set 1 boot on

# Formatage des partitions
echo "üìÇ Formatage des partitions..."
mkfs.fat -F32 "${SELECTED_DISK}1"
if [ "$SWAP_ENABLED" = true ]; then
    mkswap "${SELECTED_DISK}2"
    swapon "${SELECTED_DISK}2"
    mkfs.ext4 "${ROOT_PART}"
else
    mkfs.ext4 "${ROOT_PART}"
fi

# Montage des partitions
mount "$ROOT_PART" /mnt
mkdir -p /mnt/boot
mount "${SELECTED_DISK}1" /mnt/boot

# PHASE 2: CONFIGURATION UTILISATEUR

# Saisie des informations utilisateur
echo "üë§ Configuration du syst√®me"
while true; do
    read -p "‚Üí Nom d'utilisateur (sans espaces): " USERNAME
    if [[ "$USERNAME" =~ [[:space:]] ]]; then
        echo "‚ùå Le nom d'utilisateur ne doit pas contenir d'espaces !"
    else
        break
    fi
done

while true; do
    read -p "‚Üí Nom de la machine (hostname sans espaces): " HOSTNAME
    if [[ "$HOSTNAME" =~ [[:space:]] ]]; then
        echo "‚ùå Le hostname ne doit pas contenir d'espaces !"
    else
        break
    fi
done

while true; do
    read -s -p "‚Üí Mot de passe pour $USERNAME: " PASSWORD
    echo
    read -s -p "‚Üí Confirmez le mot de passe: " PASSWORD_CONFIRM
    echo
    if [ "$PASSWORD" = "$PASSWORD_CONFIRM" ]; then
        break
    else
        echo "‚ùå Les mots de passe ne correspondent pas !"
    fi
done

# Mise √† jour des d√©p√¥ts
echo "üì¶ Mise √† jour des d√©p√¥ts..."
pacman -Syy --noconfirm

# Installation de base
echo "üöÄ Installation du syst√®me de base..."
pacstrap /mnt base base-devel linux linux-firmware

# PHASE 3: CONFIGURATION SYST√àME

# G√©n√©ration du FSTAB
echo "üìù G√©n√©ration du fichier fstab..."
genfstab -U /mnt >> /mnt/etc/fstab

# Chroot et configuration
cat << EOF | arch-chroot /mnt /bin/bash
set -e

# Variables
USERNAME="$USERNAME"
HOSTNAME="$HOSTNAME"
PASSWORD="$PASSWORD"
GITHUB_REPO="https://raw.githubusercontent.com/votre_compte/votre_repo/main"
VIDEO_WALLPAPER_PATH="/usr/share/wallpapers/arcane-background.mp4"
LOGO_IMAGE_PATH="/usr/share/pictures/custom-fastfetch-logo.png"
BEEP_SOUND_PATH="/usr/share/sounds/fallout-beep.wav"
GRUB_THEMES_DIR="/boot/grub/themes"

# Configuration de base
echo "üè∑Ô∏è Configuration du syst√®me..."
echo "$HOSTNAME" > /etc/hostname
echo "127.0.0.1 localhost" >> /etc/hosts
echo "::1 localhost" >> /etc/hosts
echo "127.0.1.1 $HOSTNAME.localdomain $HOSTNAME" >> /etc/hosts

# Utilisateur et mot de passe
echo "üë§ Cr√©ation de l'utilisateur..."
useradd -m -G wheel,audio,video -s /bin/bash "$USERNAME"
echo "$USERNAME:$PASSWORD" | chpasswd

# sudoers
echo "%wheel ALL=(ALL:ALL) ALL" >> /etc/sudoers

# Localisation
echo "üåç Configuration des locales..."
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

# PHASE 4: INSTALLATION DES COMPOSANTS

# Installation des paquets
echo "üì¶ Installation des paquets syst√®me..."
pacman -Syu --noconfirm --needed \
    grub efibootmgr networkmanager git vim sudo pipewire pipewire-audio \
    pipewire-pulse pipewire-alsa wireplumber hyprland kitty waybar wofi \
    rofi nwg-look brightnessctl pavucontrol thunar thunar-archive-plugin \
    mpv xdg-desktop-portal-hyprland ffmpeg playerctl picom \
    sddm xdg-user-dirs noto-fonts-emoji terminus-font ttf-dejavu

# Correction pour neofetch et cava
echo "üîß Installation de neofetch et cava..."
pacman -S --noconfirm --needed neofetch cava

# UEFI + GRUB
echo "üß¨ Configuration du bootloader..."
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
mkdir -p "\$GRUB_THEMES_DIR"

# Installation du th√®me GRUB Fallout avec animation
echo "üé® Installation du th√®me GRUB Fallout..."
git clone https://github.com/shvchk/fallout-grub-theme.git "\$GRUB_THEMES_DIR/fallout"
cp -r "\$GRUB_THEMES_DIR/fallout"/* "\$GRUB_THEMES_DIR/"

# Configuration GRUB avec animation
echo "GRUB_THEME=\"\$GRUB_THEMES_DIR/theme.txt\"" >> /etc/default/grub
echo "GRUB_GFXMODE=auto" >> /etc/default/grub
echo "GRUB_GFXPAYLOAD_LINUX=keep" >> /etc/default/grub
grub-mkconfig -o /boot/grub/grub.cfg

# Sons et wallpapers
echo "üîä T√©l√©chargement des ressources multim√©dias..."
mkdir -p /usr/share/{sounds,wallpapers,pictures}
curl -Lo "\$BEEP_SOUND_PATH" "\$GITHUB_REPO/fallout-beep.wav"
curl -Lo "\$VIDEO_WALLPAPER_PATH" "\$GITHUB_REPO/arcane-background.mp4"
curl -Lo "\$LOGO_IMAGE_PATH" "\$GITHUB_REPO/custom-fastfetch-logo.png"

# Fastfetch
echo "‚ö° Configuration de Fastfetch..."
git clone https://github.com/fastfetch-cli/fastfetch.git /opt/fastfetch
cd /opt/fastfetch
cmake -B build -DCMAKE_BUILD_TYPE=Release
cmake --build build --target fastfetch
cp build/fastfetch /usr/local/bin/

mkdir -p /home/\$USERNAME/.config/fastfetch/
cat << FASTEOF > /home/\$USERNAME/.config/fastfetch/config.jsonc
{
  "logo": {
    "type": "file",
    "source": "\$LOGO_IMAGE_PATH",
    "width": 35,
    "height": 35
  },
  "color": "magenta"
}
FASTEOF

# Configuration SDDM pour Hyprland
echo "üñ•Ô∏è Configuration du gestionnaire de connexion SDDM..."
pacman -S --noconfirm --needed qt5-quickcontrols2 qt5-graphicaleffects
cat << SDDM > /etc/sddm.conf
[Theme]
Current=breeze

[Autologin]
User=$USERNAME
Session=hyprland.desktop
Relogin=false
SDDM

# Cr√©ation du dossier de configuration Hyprland
echo "üìÅ Cr√©ation des dossiers de configuration Hyprland..."
mkdir -p /home/\$USERNAME/.config/hypr
chown -R \$USERNAME:\$USERNAME /home/\$USERNAME/.config

# Configuration Hyprland minimale
echo "üåä Cr√©ation de la configuration Hyprland de base..."
cat << HYPR > /home/\$USERNAME/.config/hypr/hyprland.conf
# Configuration minimale Hyprland
exec-once = dbus-update-activation-environment --systemd DISPLAY
exec-once = systemctl --user import-environment DISPLAY
exec-once = waybar
exec-once = nm-applet --indicator

monitor=,preferred,auto,1

input {
    kb_layout = fr
    follow_mouse = 1
}

general {
    gaps_in = 5
    gaps_out = 10
    border_size = 2
    col.active_border = rgba(ff5500ee)
}

decoration {
    rounding = 5
    blur = yes
    blur_size = 3
}

animations {
    enabled = yes
}

dwindle {
    pseudotile = yes
}

master {
    new_is_master = true
}

# Raccourcis clavier
bind = SUPER, RETURN, exec, kitty
bind = SUPER, Q, killactive
bind = SUPER, M, exit
bind = SUPER, V, togglefloating
bind = SUPER, D, exec, wofi --show drun
HYPR

# Transparence
echo "üå´Ô∏è Configuration de la transparence..."
mkdir -p /home/\$USERNAME/.config/picom
cat << PICOM > /home/\$USERNAME/.config/picom/picom.conf
opacity-rule = [ "90:class_g = 'kitty'" ];
backend = "glx";
vsync = true;
blur-method = "dual_kawase";
blur-strength = 5;
PICOM

# Cava
echo "üîä Configuration de Cava..."
mkdir -p /home/\$USERNAME/.config/cava
cp /etc/cava/config /home/\$USERNAME/.config/cava/config

# Service wallpaper (d√©marre apr√®s la session graphique)
echo "üéûÔ∏è Configuration du fond d'√©cran vid√©o..."
mkdir -p /home/\$USERNAME/.config/systemd/user
cat << SERVICE > /home/\$USERNAME/.config/systemd/user/video-wallpaper.service
[Unit]
Description=Video Wallpaper Service
After=graphical-session.target

[Service]
Environment=DISPLAY=:0
ExecStart=mpv --no-audio --loop --panscan=1.0 --no-keepaspect --wid=\$(xdotool getactivewindow) "\$VIDEO_WALLPAPER_PATH"
Restart=on-failure

[Install]
WantedBy=graphical-session.target
SERVICE

# Permissions
chown -R \$USERNAME:\$USERNAME /home/\$USERNAME

# Services
echo "üöÄ Activation des services..."
systemctl enable NetworkManager
systemctl enable sddm

# Activer le service wallpaper pour l'utilisateur
echo "Enabling video wallpaper service for user..."
sudo -u \$USERNAME systemctl --user enable video-wallpaper.service

echo "‚úÖ Installation post-chroot termin√©e !"
EOF


# FINALISATION
echo "üéâ Installation compl√®te !"
echo "üîÑ D√©monter les partitions..."
umount -R /mnt
echo "üíª Vous pouvez maintenant red√©marrer avec : reboot"
echo "   Apr√®s d√©marrage, connectez-vous avec $USERNAME et son mot de passe"
