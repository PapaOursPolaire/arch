set -e

# üåå Script d'automatisation d'Arch Linux avec Hyprland - Version am√©lior√©e

# Configuration des couleurs pour une meilleure lisibilit√©
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonction pour afficher des messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}========================================${NC}"
    echo -e "${PURPLE}$1${NC}"
    echo -e "${PURPLE}========================================${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    print_header "üîç V√âRIFICATION DES PR√âREQUIS"
    
    # V√©rifier si on est en mode UEFI
    if [ ! -d "/sys/firmware/efi" ]; then
        print_error "Ce script n√©cessite un syst√®me UEFI"
        exit 1
    fi
    
    # V√©rifier la connexion internet
    if ! ping -c 1 archlinux.org &> /dev/null; then
        print_error "Connexion internet requise"
        exit 1
    fi
    
    # Synchroniser l'horloge syst√®me
    timedatectl set-ntp true
    
    print_success "Pr√©requis v√©rifi√©s"
}

# PHASE 1: CONFIGURATION PR√â-INSTALLATION
configure_partitions() {
    print_header "üìÄ CONFIGURATION DES PARTITIONS"
    
    # D√©tection des disques
    print_status "D√©tection des disques et partitions..."
    DISKS=()
    while IFS= read -r line; do
        DISKS+=("$line")
    done < <(lsblk -d -n -o NAME,SIZE,TYPE | grep 'disk' | awk '{print $1 " (" $2 ")"}')

    if [ ${#DISKS[@]} -eq 0 ]; then
        print_error "Aucun disque d√©tect√© !"
        exit 1
    fi

    # S√©lection du disque
    echo "Disques disponibles :"
    for i in "${!DISKS[@]}"; do
        echo "  $((i+1)). ${DISKS[$i]}"
    done

    while true; do
        read -p "‚Üí S√©lectionnez un disque [1-${#DISKS[@]}]: " DISK_CHOICE
        if [[ "$DISK_CHOICE" =~ ^[0-9]+$ ]] && [ "$DISK_CHOICE" -ge 1 ] && [ "$DISK_CHOICE" -le ${#DISKS[@]} ]; then
            break
        else
            print_error "S√©lection invalide"
        fi
    done

    SELECTED_DISK="/dev/$(echo "${DISKS[$((DISK_CHOICE-1))]}" | awk '{print $1}')"
    
    print_warning "ATTENTION: Toutes les donn√©es sur $SELECTED_DISK seront effac√©es !"
    read -p "Confirmez-vous ? [oui/non]: " CONFIRM
    if [[ ! "$CONFIRM" =~ ^(oui|OUI|yes|YES)$ ]]; then
        print_error "Installation annul√©e"
        exit 1
    fi

    print_status "Configuration des partitions pour $SELECTED_DISK"
    echo "   Recommandations: EFI=550M, SWAP=RAM*1.5, ROOT=50G minimum"

    # Configuration des tailles
    while true; do
        read -p "‚Üí Taille de la partition EFI [550M]: " EFI_SIZE
        EFI_SIZE=${EFI_SIZE:-550M}
        if [[ "$EFI_SIZE" =~ ^[0-9]+[MG]$ ]]; then
            break
        else
            print_error "Format invalide (ex: 550M, 1G)"
        fi
    done

    read -p "‚Üí Cr√©er une partition SWAP? [o/n]: " CREATE_SWAP
    if [[ $CREATE_SWAP =~ ^[OoYy]$ ]]; then
        while true; do
            read -p "‚Üí Taille de la partition SWAP [4G]: " SWAP_SIZE
            SWAP_SIZE=${SWAP_SIZE:-4G}
            if [[ "$SWAP_SIZE" =~ ^[0-9]+[MG]$ ]]; then
                break
            else
                print_error "Format invalide (ex: 4G, 2048M)"
            fi
        done
        SWAP_ENABLED=true
    else
        SWAP_ENABLED=false
    fi

    # Cr√©ation des partitions
    print_status "Cr√©ation des partitions..."
    wipefs -af "$SELECTED_DISK"
    parted -s "$SELECTED_DISK" mklabel gpt
    
    if [ "$SWAP_ENABLED" = true ]; then
        parted -s "$SELECTED_DISK" mkpart primary fat32 1MiB "$EFI_SIZE"
        parted -s "$SELECTED_DISK" mkpart primary linux-swap "$EFI_SIZE" "+$SWAP_SIZE"
        parted -s "$SELECTED_DISK" mkpart primary ext4 "+$SWAP_SIZE" 100%
        ROOT_PART="${SELECTED_DISK}3"
        SWAP_PART="${SELECTED_DISK}2"
    else
        parted -s "$SELECTED_DISK" mkpart primary fat32 1MiB "$EFI_SIZE"
        parted -s "$SELECTED_DISK" mkpart primary ext4 "$EFI_SIZE" 100%
        ROOT_PART="${SELECTED_DISK}2"
    fi
    
    parted -s "$SELECTED_DISK" set 1 esp on
    
    # Attendre que les partitions soient reconnues
    sleep 2
    partprobe "$SELECTED_DISK"

    # Formatage des partitions
    print_status "Formatage des partitions..."
    mkfs.fat -F32 "${SELECTED_DISK}1"
    
    if [ "$SWAP_ENABLED" = true ]; then
        mkswap "$SWAP_PART"
        swapon "$SWAP_PART"
    fi
    
    mkfs.ext4 -F "$ROOT_PART"

    # Montage des partitions
    print_status "Montage des partitions..."
    mount "$ROOT_PART" /mnt
    mkdir -p /mnt/boot
    mount "${SELECTED_DISK}1" /mnt/boot
    
    print_success "Partitions configur√©es et mont√©es"
}

# PHASE 2: CONFIGURATION UTILISATEUR
configure_user() {
    print_header "üë§ CONFIGURATION UTILISATEUR"
    
    while true; do
        read -p "‚Üí Nom d'utilisateur: " USERNAME
        if [[ "$USERNAME" =~ ^[a-z][a-z0-9_-]*$ ]] && [ ${#USERNAME} -ge 3 ]; then
            break
        else
            print_error "Nom invalide (3+ caract√®res, minuscules, chiffres, - et _ autoris√©s)"
        fi
    done

    while true; do
        read -p "‚Üí Nom de la machine (hostname): " HOSTNAME
        if [[ "$HOSTNAME" =~ ^[a-zA-Z][a-zA-Z0-9-]*$ ]] && [ ${#HOSTNAME} -ge 2 ]; then
            break
        else
            print_error "Hostname invalide (lettres, chiffres et tirets uniquement)"
        fi
    done

    while true; do
        read -s -p "‚Üí Mot de passe pour $USERNAME: " PASSWORD
        echo
        if [ ${#PASSWORD} -ge 6 ]; then
            read -s -p "‚Üí Confirmez le mot de passe: " PASSWORD_CONFIRM
            echo
            if [ "$PASSWORD" = "$PASSWORD_CONFIRM" ]; then
                break
            else
                print_error "Les mots de passe ne correspondent pas"
            fi
        else
            print_error "Mot de passe trop court (minimum 6 caract√®res)"
        fi
    done
    
    print_success "Configuration utilisateur termin√©e"
}

# PHASE 3: INSTALLATION SYST√àME
install_base_system() {
    print_header "üöÄ INSTALLATION DU SYST√àME DE BASE"
    
    # Mise √† jour des miroirs
    print_status "Optimisation des miroirs..."
    pacman -Sy --noconfirm reflector
    reflector --latest 20 --protocol https --sort rate --save /etc/pacman.d/mirrorlist

    # Installation de base
    print_status "Installation du syst√®me de base..."
    pacstrap /mnt base base-devel linux linux-firmware intel-ucode amd-ucode

    # G√©n√©ration du FSTAB
    print_status "G√©n√©ration du fichier fstab..."
    genfstab -U /mnt >> /mnt/etc/fstab
    
    print_success "Syst√®me de base install√©"
}

# PHASE 4: CONFIGURATION DANS CHROOT
configure_system() {
    print_header "‚öôÔ∏è CONFIGURATION SYST√àME"
    
    # Copier le script dans le chroot pour la suite
    cp "$0" /mnt/setup_chroot.sh
    chmod +x /mnt/setup_chroot.sh

    # Variables d'environnement pour le chroot
    cat << EOF > /mnt/setup_vars.sh
export USERNAME="$USERNAME"
export HOSTNAME="$HOSTNAME"
export PASSWORD="$PASSWORD"
export SWAP_ENABLED="$SWAP_ENABLED"
EOF

    # Chroot et configuration
    arch-chroot /mnt /bin/bash << 'CHROOT_EOF'
source /setup_vars.sh

# Fonctions utilitaires dans le chroot
print_status() { echo -e "\033[0;34m[INFO]\033[0m $1"; }
print_success() { echo -e "\033[0;32m[SUCCESS]\033[0m $1"; }
print_error() { echo -e "\033[0;31m[ERROR]\033[0m $1"; }

# Configuration de base
print_status "Configuration de base du syst√®me..."
ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime
hwclock --systohc

# Localisation
print_status "Configuration des locales..."
sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
sed -i 's/#fr_FR.UTF-8 UTF-8/fr_FR.UTF-8 UTF-8/' /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "LC_TIME=fr_FR.UTF-8" >> /etc/locale.conf

# Configuration r√©seau
print_status "Configuration r√©seau..."
echo "$HOSTNAME" > /etc/hostname
cat << HOSTS > /etc/hosts
127.0.0.1   localhost
::1         localhost
127.0.1.1   $HOSTNAME.localdomain $HOSTNAME
HOSTS

# Configuration utilisateur
print_status "Cr√©ation de l'utilisateur..."
useradd -m -G wheel,audio,video,storage,optical,scanner -s /bin/bash "$USERNAME"
echo "$USERNAME:$PASSWORD" | chpasswd
echo "root:$PASSWORD" | chpasswd

# Configuration sudo
print_status "Configuration sudo..."
sed -i 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers
echo "$USERNAME ALL=(ALL) NOPASSWD: /usr/bin/systemctl poweroff, /usr/bin/systemctl reboot" >> /etc/sudoers

# Configuration pacman
print_status "Configuration de pacman..."
sed -i 's/#Color/Color/' /etc/pacman.conf
sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 5/' /etc/pacman.conf
sed -i '/\[multilib\]/,/Include/s/^#//' /etc/pacman.conf
pacman -Sy

# Installation des paquets essentiels
print_status "Installation des paquets essentiels..."
pacman -S --noconfirm --needed \
    grub efibootmgr networkmanager git vim nano sudo wget curl \
    pipewire pipewire-audio pipewire-pulse pipewire-alsa wireplumber \
    xdg-user-dirs xdg-utils

# Installation Hyprland et environnement
print_status "Installation de l'environnement graphique..."
pacman -S --noconfirm --needed \
    hyprland kitty waybar wofi rofi nwg-look brightnessctl pavucontrol \
    thunar thunar-archive-plugin thunar-volman gvfs \
    sddm qt5-quickcontrols2 qt5-graphicaleffects qt5-svg \
    xdg-desktop-portal-hyprland polkit-gnome \
    swww grim slurp wl-clipboard cliphist

# Polices et th√®mes
print_status "Installation des polices et th√®mes..."
pacman -S --noconfirm --needed \
    noto-fonts noto-fonts-emoji noto-fonts-cjk \
    ttf-dejavu ttf-liberation ttf-roboto ttf-opensans \
    papirus-icon-theme

# Outils syst√®me
print_status "Installation d'outils syst√®me..."
pacman -S --noconfirm --needed \
    htop btop neovim firefox chromium mpv vlc \
    unzip unrar p7zip file-roller \
    bluez bluez-utils pulseaudio-bluetooth

# Installation de yay (AUR helper)
print_status "Installation de yay..."
cd /opt
git clone https://aur.archlinux.org/yay.git
chown -R $USERNAME:$USERNAME ./yay
cd yay
sudo -u $USERNAME makepkg -si --noconfirm
cd /

# Installation de fastfetch depuis AUR
print_status "Installation de fastfetch..."
sudo -u $USERNAME yay -S --noconfirm fastfetch-git

# Configuration GRUB
print_status "Configuration du bootloader GRUB..."
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=3/' /etc/default/grub
sed -i 's/#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/' /etc/default/grub
grub-mkconfig -o /boot/grub/grub.cfg

# Configuration SDDM
print_status "Configuration du gestionnaire de connexion..."
systemctl enable sddm
cat << SDDM_CONF > /etc/sddm.conf
[Theme]
Current=breeze

[Autologin]
User=$USERNAME
Session=hyprland.desktop
Relogin=false

[X11]
ServerPath=/usr/bin/X
ServerArguments=-nolisten tcp

[Wayland]
EnableHiDPI=true
SDDM_CONF

# Services syst√®me
print_status "Activation des services..."
systemctl enable NetworkManager
systemctl enable bluetooth
systemctl enable fstrim.timer

# Configuration des dossiers utilisateur
print_status "Configuration des dossiers utilisateur..."
sudo -u $USERNAME xdg-user-dirs-update

# Configuration Hyprland
print_status "Configuration de Hyprland..."
mkdir -p /home/$USERNAME/.config/{hypr,waybar,wofi,kitty}
chown -R $USERNAME:$USERNAME /home/$USERNAME/.config

# Configuration Hyprland principale
cat << HYPRLAND > /home/$USERNAME/.config/hypr/hyprland.conf
# Configuration Hyprland optimis√©e

# Variables
\$terminal = kitty
\$fileManager = thunar
\$menu = wofi --show drun
\$browser = firefox

# Moniteur
monitor=,preferred,auto,1

# D√©marrage automatique
exec-once = waybar
exec-once = swww init
exec-once = /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
exec-once = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
exec-once = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
exec-once = cliphist wipe && wl-paste --watch cliphist store

# Variables d'environnement
env = XCURSOR_SIZE,24
env = QT_QPA_PLATFORMTHEME,qt5ct
env = WLR_NO_HARDWARE_CURSORS,1

# Entr√©e
input {
    kb_layout = fr
    kb_variant = 
    kb_model =
    kb_options =
    kb_rules =
    
    follow_mouse = 1
    
    touchpad {
        natural_scroll = true
        disable_while_typing = true
        tap-to-click = true
    }
    
    sensitivity = 0
}

# G√©n√©ral
general {
    gaps_in = 5
    gaps_out = 10
    border_size = 2
    col.active_border = rgba(ff6600ee) rgba(ff9500ee) 45deg
    col.inactive_border = rgba(595959aa)
    
    layout = dwindle
    allow_tearing = false
}

# D√©coration
decoration {
    rounding = 8
    
    blur {
        enabled = true
        size = 6
        passes = 3
        new_optimizations = true
        ignore_opacity = true
    }
    
    drop_shadow = true
    shadow_range = 8
    shadow_render_power = 3
    col.shadow = rgba(1a1a1aee)
}

# Animations
animations {
    enabled = true
    
    bezier = myBezier, 0.05, 0.9, 0.1, 1.05
    
    animation = windows, 1, 7, myBezier
    animation = windowsOut, 1, 7, default, popin 80%
    animation = border, 1, 10, default
    animation = borderangle, 1, 8, default
    animation = fade, 1, 7, default
    animation = workspaces, 1, 6, default
}

# Layout dwindle
dwindle {
    pseudotile = true
    preserve_split = true
}

# Raccourcis clavier
bind = SUPER, RETURN, exec, \$terminal
bind = SUPER, Q, killactive
bind = SUPER, M, exit
bind = SUPER, E, exec, \$fileManager
bind = SUPER, V, togglefloating
bind = SUPER, D, exec, \$menu
bind = SUPER, P, pseudo
bind = SUPER, J, togglesplit
bind = SUPER, B, exec, \$browser
bind = SUPER, L, exec, swaylock

# Screenshots
bind = , Print, exec, grim -g "\$(slurp)" - | wl-copy
bind = SHIFT, Print, exec, grim - | wl-copy

# Audio
binde = , XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
binde = , XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bind = , XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle

# Luminosit√©
binde = , XF86MonBrightnessUp, exec, brightnessctl set 10%+
binde = , XF86MonBrightnessDown, exec, brightnessctl set 10%-

# Navigation
bind = SUPER, left, movefocus, l
bind = SUPER, right, movefocus, r
bind = SUPER, up, movefocus, u
bind = SUPER, down, movefocus, d

# Espaces de travail
bind = SUPER, 1, workspace, 1
bind = SUPER, 2, workspace, 2
bind = SUPER, 3, workspace, 3
bind = SUPER, 4, workspace, 4
bind = SUPER, 5, workspace, 5
bind = SUPER, 6, workspace, 6
bind = SUPER, 7, workspace, 7
bind = SUPER, 8, workspace, 8
bind = SUPER, 9, workspace, 9
bind = SUPER, 0, workspace, 10

bind = SUPER SHIFT, 1, movetoworkspace, 1
bind = SUPER SHIFT, 2, movetoworkspace, 2
bind = SUPER SHIFT, 3, movetoworkspace, 3
bind = SUPER SHIFT, 4, movetoworkspace, 4
bind = SUPER SHIFT, 5, movetoworkspace, 5
bind = SUPER SHIFT, 6, movetoworkspace, 6
bind = SUPER SHIFT, 7, movetoworkspace, 7
bind = SUPER SHIFT, 8, movetoworkspace, 8
bind = SUPER SHIFT, 9, movetoworkspace, 9
bind = SUPER SHIFT, 0, movetoworkspace, 10

# Souris
bindm = SUPER, mouse:272, movewindow
bindm = SUPER, mouse:273, resizewindow

# R√®gles de fen√™tre
windowrule = float, ^(pavucontrol)$
windowrule = float, ^(blueman-manager)$
windowrulev2 = opacity 0.8 0.8,class:^(kitty)$
HYPRLAND

# Configuration Waybar
cat << WAYBAR > /home/$USERNAME/.config/waybar/config
{
    "layer": "top",
    "position": "top",
    "height": 35,
    "spacing": 5,
    
    "modules-left": ["hyprland/workspaces", "hyprland/window"],
    "modules-center": ["clock"],
    "modules-right": ["pulseaudio", "network", "battery", "tray"],
    
    "hyprland/workspaces": {
        "disable-scroll": true,
        "all-outputs": true,
        "format": "{icon}",
        "format-icons": {
            "1": "1",
            "2": "2", 
            "3": "3",
            "4": "4",
            "5": "5",
            "urgent": "",
            "focused": "",
            "default": ""
        }
    },
    
    "hyprland/window": {
        "format": "{title}",
        "max-length": 50
    },
    
    "clock": {
        "timezone": "Europe/Paris",
        "tooltip-format": "<big>{:%Y %B}</big>\n<tt><small>{calendar}</small></tt>",
        "format": "{:%d/%m/%Y %H:%M}"
    },
    
    "battery": {
        "states": {
            "warning": 30,
            "critical": 15
        },
        "format": "{capacity}% {icon}",
        "format-charging": "{capacity}% ",
        "format-plugged": "{capacity}% ",
        "format-alt": "{time} {icon}",
        "format-icons": ["", "", "", "", ""]
    },
    
    "network": {
        "format-wifi": "{essid} ({signalStrength}%) ",
        "format-ethernet": "Ethernet ",
        "format-disconnected": "D√©connect√© ",
        "tooltip-format": "{ifname} via {gwaddr} ",
        "tooltip-format-wifi": "{essid} ({signalStrength}%) "
    },
    
    "pulseaudio": {
        "format": "{volume}% {icon} {format_source}",
        "format-bluetooth": "{volume}% {icon} {format_source}",
        "format-bluetooth-muted": " {icon} {format_source}",
        "format-muted": " {format_source}",
        "format-source": "{volume}% ",
        "format-source-muted": "",
        "format-icons": {
            "headphone": "",
            "hands-free": "",
            "headset": "",
            "phone": "",
            "portable": "",
            "car": "",
            "default": ["", "", ""]
        },
        "on-click": "pavucontrol"
    },
    
    "tray": {
        "spacing": 10
    }
}
WAYBAR

# Style Waybar
cat << WAYBAR_CSS > /home/$USERNAME/.config/waybar/style.css
* {
    font-family: "DejaVu Sans", sans-serif;
    font-size: 13px;
}

window#waybar {
    background-color: rgba(26, 27, 38, 0.9);
    border-bottom: 2px solid rgba(255, 102, 0, 0.8);
    color: #ffffff;
}

button {
    box-shadow: inset 0 -3px transparent;
    border: none;
    border-radius: 0;
}

#workspaces button {
    padding: 0 8px;
    background-color: transparent;
    color: #ffffff;
}

#workspaces button:hover {
    background: rgba(255, 255, 255, 0.1);
}

#workspaces button.active {
    background-color: rgba(255, 102, 0, 0.8);
    color: #000000;
}

#clock,
#battery,
#network,
#pulseaudio,
#tray {
    padding: 0 10px;
}

#battery.critical:not(.charging) {
    background-color: #f53c3c;
    color: #ffffff;
    animation-name: blink;
    animation-duration: 0.5s;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-direction: alternate;
}
WAYBAR_CSS

# Configuration Kitty
cat << KITTY > /home/$USERNAME/.config/kitty/kitty.conf
# Apparence
font_family      DejaVu Sans Mono
font_size        11.0
background_opacity 0.9

# Couleurs
foreground #ffffff
background #1a1b26

# Raccourcis
map ctrl+shift+c copy_to_clipboard
map ctrl+shift+v paste_from_clipboard
map ctrl+shift+t new_tab
map ctrl+shift+q close_tab
KITTY

# Configuration fastfetch
mkdir -p /home/$USERNAME/.config/fastfetch
cat << FASTFETCH > /home/$USERNAME/.config/fastfetch/config.jsonc
{
    "\$schema": "https://github.com/fastfetch-cli/fastfetch/raw/dev/doc/json_schema.json",
    "logo": {
        "source": "arch_small"
    },
    "display": {
        "separator": " -> "
    },
    "modules": [
        "title",
        "separator",
        "os",
        "host",
        "kernel",
        "uptime",
        "packages",
        "shell",
        "display",
        "de",
        "wm",
        "wmtheme",
        "theme",
        "icons",
        "font",
        "cursor",
        "terminal",
        "terminalfont",
        "cpu",
        "gpu",
        "memory",
        "swap",
        "disk",
        "localip",
        "battery",
        "poweradapter",
        "locale",
        "break",
        "colors"
    ]
}
FASTFETCH

# Configuration automatique du shell
echo 'if [ -t 0 ] && [ -z "\$TMUX" ] && [ "\$TERM" != "screen" ]; then fastfetch; fi' >> /home/$USERNAME/.bashrc

# Permissions finales
chown -R $USERNAME:$USERNAME /home/$USERNAME

print_success "Configuration syst√®me termin√©e"

# Nettoyage
rm -f /setup_vars.sh /setup_chroot.sh

CHROOT_EOF

    # Nettoyage
    rm -f /mnt/setup_vars.sh /mnt/setup_chroot.sh
    
    print_success "Configuration syst√®me termin√©e"
}

# FONCTION PRINCIPALE
main() {
    print_header "üåå INSTALLATION AUTOMATIQUE D'ARCH LINUX AVEC HYPRLAND"
    print_status "Version am√©lior√©e avec corrections et optimisations"
    
    check_prerequisites
    configure_partitions
    configure_user
    install_base_system
    configure_system
    
    print_header "üéâ INSTALLATION TERMIN√âE !"
    print_success "Le syst√®me est pr√™t √† √™tre utilis√©"
    print_status "Informations de connexion:"
    echo "  ‚Üí Utilisateur: $USERNAME"
    echo "  ‚Üí Hostname: $HOSTNAME"
    echo "  ‚Üí Environnement: Hyprland"
    echo ""
    print_status "Commandes utiles apr√®s red√©marrage:"
    echo "  ‚Üí Super + Enter: Terminal"
    echo "  ‚Üí Super + D: Menu applications"  
    echo "  ‚Üí Super + Q: Fermer fen√™tre"
    echo "  ‚Üí Super + M: Quitter Hyprland"
    echo ""
    
    read -p "Appuyez sur Entr√©e pour d√©monter et red√©marrer..." 
    
    print_status "D√©montage des partitions..."
    umount -R /mnt 2>/dev/null || true
    
    print_status "Red√©marrage dans 5 secondes..."
    sleep 5
    reboot
}

# V√©rifier si le script est lanc√© avec les privil√®ges root
if [ "$EUID" -ne 0 ]; then
    print_error "Ce script doit √™tre lanc√© en tant que root"
    exit 1
fi

# Lancement du script principal
main "$@"
