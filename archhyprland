set -e

# üåå Script d'automatisation d'Arch Linux avec Hyprland (version corrig√©e)

# Fonction de validation des noms
validate_name() {
    local name=$1
    local type=$2
    if [[ ! "$name" =~ ^[a-z][a-z0-9_-]*$ ]]; then
        echo "‚ùå Format $type invalide ! Doit commencer par une lettre minuscule et ne contenir que :"
        echo "   - Lettres minuscules"
        echo "   - Chiffres"
        echo "   - Tirets (-) et underscores (_)"
        echo "   - Pas d'espaces, majuscules ou caract√®res sp√©ciaux"
        return 1
    fi
    return 0
}

# PHASE 0: V√âRIFICATIONS PR√âLIMINAIRES
echo "üîç V√©rification des pr√©requis..."
if ! ping -c 1 archlinux.org &> /dev/null; then
    echo "‚ùå Connexion Internet requise !"
    exit 1
fi

if [ "$(id -u)" -ne 0 ]; then
    echo "‚ùå Le script doit √™tre ex√©cut√© en tant que root !"
    exit 1
fi

# PHASE 1: CONFIGURATION PR√â-INSTALLATION

# D√©tection des partitions
echo "üîç D√©tection des disques et partitions..."
DISKS=()
while IFS= read -r line; do
    DISKS+=("$line")
done < <(lsblk -d -n -o NAME,SIZE,TYPE,MODEL | grep 'disk' | awk '{print $1 " (" $2 ") - " substr($0, index($0,$4))}')

if [ ${#DISKS[@]} -eq 0 ]; then
    echo "‚ùå Aucun disque d√©tect√© !"
    exit 1
fi

# S√©lection du disque et partitionnement
echo "üìÄ Disques disponibles :"
for i in "${!DISKS[@]}"; do
    echo "  $((i+1)). ${DISKS[$i]}"
done

while true; do
    read -p "‚Üí S√©lectionnez un disque [1-${#DISKS[@]}]: " DISK_CHOICE
    if [[ "$DISK_CHOICE" =~ ^[0-9]+$ ]] && [ "$DISK_CHOICE" -ge 1 ] && [ "$DISK_CHOICE" -le ${#DISKS[@]} ]; then
        SELECTED_DISK="/dev/$(echo "${DISKS[$((DISK_CHOICE-1))]}" | awk '{print $1}')"
        break
    else
        echo "‚ùå Choix invalide !"
    fi
done

echo "üíæ Configuration des partitions pour $SELECTED_DISK:"
echo "   (Minimum recommand√©: EFI=550M, ROOT=30G)"

# Configuration des partitions
read -p "‚Üí Taille de la partition EFI (ex: 550M): " EFI_SIZE
read -p "‚Üí Taille de la partition ROOT (ex: 30G): " ROOT_SIZE
read -p "‚Üí Voulez-vous une partition SWAP ? [o/n]: " SWAP_NEEDED

if [[ "$SWAP_NEEDED" =~ ^[oOyY].* ]]; then
    read -p "‚Üí Taille de la partition SWAP (ex: 4G): " SWAP_SIZE
    SWAP_PART=2
    ROOT_PART=3
else
    SWAP_SIZE="0"
    SWAP_PART=""
    ROOT_PART=2
fi

# Cr√©ation des partitions
echo "üóÇÔ∏è Cr√©ation des partitions..."
parted -s "$SELECTED_DISK" mklabel gpt
parted -s "$SELECTED_DISK" mkpart primary fat32 0% "$EFI_SIZE"
[ -n "$SWAP_PART" ] && parted -s "$SELECTED_DISK" mkpart primary linux-swap "$EFI_SIZE" "$SWAP_SIZE"
parted -s "$SELECTED_DISK" mkpart primary ext4 "${SWAP_SIZE:-$EFI_SIZE}" "$ROOT_SIZE"
parted -s "$SELECTED_DISK" set 1 boot on

# Formatage des partitions
echo "üìÇ Formatage des partitions..."
mkfs.fat -F32 "${SELECTED_DISK}1"
[ -n "$SWAP_PART" ] && mkswap "${SELECTED_DISK}$SWAP_PART"
[ -n "$SWAP_PART" ] && swapon "${SELECTED_DISK}$SWAP_PART"
mkfs.ext4 "${SELECTED_DISK}$ROOT_PART"

# Montage des partitions
mount "${SELECTED_DISK}$ROOT_PART" /mnt
mkdir -p /mnt/boot
mount "${SELECTED_DISK}1" /mnt/boot

# PHASE 2: CONFIGURATION UTILISATEUR

# Saisie des informations utilisateur
echo "üë§ Configuration du syst√®me"
while true; do
    read -p "‚Üí Nom d'utilisateur (minuscules/chiffres/_/-): " USERNAME
    validate_name "$USERNAME" "d'utilisateur" && break
done

while true; do
    read -p "‚Üí Nom de la machine (hostname, minuscules/chiffres/_/-): " HOSTNAME
    validate_name "$HOSTNAME" "hostname" && break
done

while true; do
    read -s -p "‚Üí Mot de passe pour $USERNAME: " PASSWORD
    echo
    read -s -p "‚Üí Confirmez le mot de passe: " PASSWORD_CONFIRM
    echo
    if [ "$PASSWORD" = "$PASSWORD_CONFIRM" ]; then
        break
    else
        echo "‚ùå Les mots de passe ne correspondent pas !"
    fi
done

# Mise √† jour des d√©p√¥ts
echo "üì¶ Mise √† jour des d√©p√¥ts..."
pacman -Syy --noconfirm

# Installation de base
echo "üöÄ Installation du syst√®me de base..."
pacstrap /mnt base base-devel linux linux-firmware

# PHASE 3: CONFIGURATION SYST√àME

# G√©n√©ration du FSTAB
echo "üìù G√©n√©ration du fichier fstab..."
genfstab -U /mnt >> /mnt/etc/fstab

# Chroot et configuration
cat << EOF | arch-chroot /mnt /bin/bash
set -e

# Variables
USERNAME="$USERNAME"
HOSTNAME="$HOSTNAME"
PASSWORD="$PASSWORD"
GITHUB_REPO="https://raw.githubusercontent.com/PapaOursPolaire/archautoconfig/refs/heads/Projets/archhyprland"
VIDEO_WALLPAPER_PATH="/usr/share/wallpapers/bkv.mp4"
LOGO_IMAGE_PATH="/usr/share/pictures/Papa-Ours.png"
BEEP_SOUND_PATH="/usr/share/sounds/FalloutBip.mp3"
GRUB_THEMES_DIR="/boot/grub/themes"

# Configuration de base
echo "üè∑Ô∏è Configuration du syst√®me..."
echo "$HOSTNAME" > /etc/hostname
echo "127.0.0.1 localhost" >> /etc/hosts
echo "::1 localhost" >> /etc/hosts
echo "127.0.1.1 $HOSTNAME.localdomain $HOSTNAME" >> /etc/hosts

# Utilisateur et mot de passe
echo "üë§ Cr√©ation de l'utilisateur..."
useradd -m -G wheel -s /bin/bash "$USERNAME"
echo "$USERNAME:$PASSWORD" | chpasswd

# sudoers
echo "%wheel ALL=(ALL:ALL) ALL" >> /etc/sudoers

# Localisation
echo "üåç Configuration des locales..."
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
ln -sf /usr/share/zoneinfo/Europe/Paris /etc/localtime
hwclock --systohc

# PHASE 4: INSTALLATION DES COMPOSANTS

# Installation des paquets
echo "üì¶ Installation des paquets syst√®me..."
pacman -Syu --noconfirm --needed \
    grub efibootmgr networkmanager git vim sudo pipewire pipewire-audio \
    pipewire-pulse pipewire-alsa wireplumber hyprland kitty waybar wofi \
    rofi nwg-look brightnessctl pavucontrol thunar thunar-archive-plugin \
    mpv xdg-desktop-portal-hyprland ffmpeg playerctl picom cava xdotool \
    noto-fonts noto-fonts-emoji ttf-dejavu ttf-liberation

# UEFI + GRUB
echo "üß¨ Configuration du bootloader..."
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
mkdir -p "\$GRUB_THEMES_DIR"

# Th√®mes GRUB
echo "üé® Installation des th√®mes GRUB..."
themes=(
    "https://github.com/shvchk/fallout-grub-theme"
    "https://github.com/vinceliuice/BSOL-GRUB-Theme"
    "https://github.com/JeansLucifer/Minegrub-Theme"
    "https://github.com/Mangeshrex/CRT-Amber-GRUB-Theme"
    "https://github.com/vinceliuice/Arcade-GRUB-Theme"
    "https://github.com/vinceliuice/Dark-Matter-Grub-Theme"
)

theme_names=(
    "Fallout"
    "BSOL"
    "Minegrub"
    "CRT-Amber"
    "Arcade"
    "Dark-Matter"
)

for i in "\${!themes[@]}"; do
    git clone "\${themes[\$i]}" "/tmp/\${theme_names[\$i]}" >/dev/null 2>&1 || true
    if [ -d "/tmp/\${theme_names[\$i]}" ]; then
        mkdir -p "\$GRUB_THEMES_DIR/\${theme_names[\$i]}"
        cp -r "/tmp/\${theme_names[\$i]}"/* "\$GRUB_THEMES_DIR/\${theme_names[\$i]}/" || true
    fi
done

echo "GRUB_THEME=\"\$GRUB_THEMES_DIR/Fallout/theme.txt\"" >> /etc/default/grub
grub-mkconfig -o /boot/grub/grub.cfg

# Sons et wallpapers
echo "üîä T√©l√©chargement des ressources multim√©dias..."
mkdir -p /usr/share/{sounds,wallpapers,pictures}
curl -fLo "\$BEEP_SOUND_PATH" "\$GITHUB_REPO/FalloutBip.mp3" || echo "‚ö†Ô∏è Impossible de t√©l√©charger le son"
curl -fLo "\$VIDEO_WALLPAPER_PATH" "\$GITHUB_REPO/bkv.mp4" || echo "‚ö†Ô∏è Impossible de t√©l√©charger le wallpaper"
curl -fLo "\$LOGO_IMAGE_PATH" "\$GITHUB_REPO/Papa-Ours.png" || echo "‚ö†Ô∏è Impossible de t√©l√©charger le logo"

# Fastfetch
echo "‚ö° Installation de Fastfetch..."
if ! command -v fastfetch &> /dev/null; then
    if pacman -S fastfetch --noconfirm &> /dev/null; then
        echo "‚úÖ Fastfetch install√© via pacman"
    else
        echo "‚ö†Ô∏è Installation via pacman √©chou√©e, tentative de compilation..."
        pacman -S --noconfirm cmake base-devel
        git clone https://github.com/fastfetch-cli/fastfetch.git /tmp/fastfetch
        cd /tmp/fastfetch
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --target fastfetch
        cp build/fastfetch /usr/local/bin/
    fi
fi

mkdir -p /home/\$USERNAME/.config/fastfetch/
cat << FASTEOF > /home/\$USERNAME/.config/fastfetch/config.jsonc
{
  "logo": {
    "type": "file",
    "source": "\$LOGO_IMAGE_PATH",
    "width": 35,
    "height": 35
  },
  "color": "magenta"
}
FASTEOF
chown \$USERNAME: /home/\$USERNAME/.config/fastfetch/config.jsonc

# Autres configurations
echo "üéûÔ∏è Configuration du fond d'√©cran vid√©o..."
cat << SERVICE > /etc/systemd/system/video-wallpaper.service
[Unit]
Description=Video Wallpaper Service
After=graphical-session.target

[Service]
User=\$USERNAME
Environment=DISPLAY=:0
ExecStart=mpv --no-audio --loop --panscan=1.0 --no-keepaspect --wid=\$(xdotool search --onlyvisible --class Hyprland | head -n1) "\$VIDEO_WALLPAPER_PATH"
Restart=on-failure

[Install]
WantedBy=graphical-session.target
SERVICE

# Transparence
echo "üå´Ô∏è Configuration de la transparence..."
mkdir -p /home/\$USERNAME/.config/picom
cat << PICOM > /home/\$USERNAME/.config/picom/picom.conf
opacity-rule = [ "90:class_g = 'kitty'" ];
backend = "glx";
vsync = true;
blur-method = "dual_kawase";
blur-strength = 5;
PICOM

# Cava
echo "üîä Configuration de Cava..."
mkdir -p /home/\$USERNAME/.config/cava
cp /etc/cava/config /home/\$USERNAME/.config/cava/config

# Permissions
chown -R \$USERNAME:\$USERNAME /home/\$USERNAME

# Services
echo "üöÄ Activation des services..."
systemctl enable NetworkManager
systemctl enable video-wallpaper.service

echo "‚úÖ Installation post-chroot termin√©e !"
EOF

# FINALISATION
echo "üéâ Installation compl√®te !"
echo "üîÑ D√©monter les partitions..."
umount -R /mnt || true
echo "üíª Vous pouvez maintenant red√©marrer avec : reboot"
